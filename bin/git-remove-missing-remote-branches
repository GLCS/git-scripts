#!/bin/bash

. colors
. script-functions

local_branches=()
if [[ "$#" -eq 0 ]]
then
	local_branches=($(git for-each-ref --format='%(refname:short)' refs/heads/*))
else
	for arg in "$@"
	do
		local_branches+=($(git for-each-ref --format='%(refname:short)' refs/heads/${arg}*))
	done
fi

remote_branches=()
if [[ "$#" -eq 0 ]]
then
	remote_branches=($(git ls-remote origin --heads refs/heads/${1}* | sed -r 's|^[0-9a-f]+\s*refs/heads/(.*)$|\1|g' | xargs))
else
	for arg in "$@"
	do
		remote_branches+=($(git ls-remote origin --heads refs/heads/${1}* | sed -r 's|^[0-9a-f]+\s*refs/heads/(.*)$|\1|g' | xargs))
	done
fi

delete_branches=()
for remote_branch in "${remote_branches[@]}"
do
	if ! contains "${remote_branch}" "${local_branches[@]}"
	then
		delete_branches+=(${remote_branch})
	fi
done

printf "Running this command is potentially ${yellow}dangerous${nc},\n"
printf "and any mistakes can lead to ${yellow}loss work${nc}.\n"

if [[ "${#delete_branches[@]}" -eq 0 ]]
then
	printf "All matching remote branches have corresponding local branches.\n"
	exit 0
fi
printf "These remote branches with no corresponding local branch will be ${yellow}deleted${nc}!\n"

for delete_branch in "${delete_branches[@]}"
do
	printf "  origin/${delete_branch}\n"
done

ask-for-confirmation

for delete_branch in "${delete_branches[@]}"
do
	git push origin --delete ${delete_branch}
done
