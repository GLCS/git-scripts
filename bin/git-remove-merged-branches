#!/bin/bash

if [ "${#}" -lt "2" ]
then
	printf "Usage: git-remove-merged-branches <base branch> <branch match string...>\n"
	exit 1
fi

. colors
. script-functions

save-branch

base_branch="master"
if is-valid-branch "${1}"
then
	base_branch="${1}"
else
	printf "${1} is not a valid branch\n"
	exit 1
fi

refs=""
shift
for arg in "$@"
do
	refs="$(git for-each-ref --format='%(refname:short)' refs/heads/${arg}*) ${refs}"
done

printf "This will rebase the following branches on to ${green}${base_branch}${nc}\n"
for ref in ${refs}
do
	printf "  ${ref}\n"
done

ask-for-confirmation
if ! git sync ${base_branch}
then
	exit 1
fi

for ref in ${refs}
do
	printf "\nAttempting to remove ${ref}\n"

	if git rebase ${base_branch} ${ref}
	then
		git checkout ${base_branch}

		if [ "$(git rev-parse ${base_branch})" = "$(git rev-parse ${ref})" ]
		then
			git push origin ${ref} --delete
			git branch -D ${ref}
		fi
	else
		printf "Unable to rebase ${ref} ... aborting rebase\n"
		git rebase --abort &> /dev/null
	fi
done

restore-branch